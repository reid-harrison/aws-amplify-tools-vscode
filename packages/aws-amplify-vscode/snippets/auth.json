{
    "Amplify Auth Configuration": {
        "prefix": "Amplify.configure",
        "body": [
            "Amplify.configure({",
            "\tAuth: {",
            "\t\t// REQUIRED - Amazon Cognito Identity Pool ID,",
            "\t\tidentityPoolId: 'XX-XXXX-X:XXXXXXXX-XXXX-1234-abcd-1234567890ab',",
            "\t\t// REQUIRED - Amazon Cognito Region",
            "\t\tregion: 'XX-XXXX-X',",
            "\t\t// OPTIONAL - Amazon Cognito User Pool ID",
            "\t\tuserPoolId: 'XX-XXXX-X_abcd1234',",
            "\t\t// OPTIONAL - Amazon Cognito Web Client ID (26-char alphanumeric string)",
            "\t\tuserPoolWebClientId: 'a1b2c3d4e5f6g7h8i9j0k1l2m3',",
            "\t\t// OPTIONAL - Enforce user authentication prior to accessing AWS resources or not",
            "\t\tmandatorySignIn: false,",
            "\t\t// OPTIONAL - Configuration for cookie storage",
            "\t\t\tcookieStorage: {",
            "\t\t\t// REQUIRED - Cookie domain (only required if cookieStorage is provided)",
            "\t\t\tdomain: '.yourdomain.com',",
            "\t\t\t// OPTIONAL - Cookie path",
            "\t\t\tpath: '/',",
            "\t\t\t// OPTIONAL - Cookie expiration in days",
            "\t\t\texpires: 365,",
            "\t\t\t// OPTIONAL - Cookie secure flag",
            "\t\t\tsecure: true",
            "\t\t}",
            "\t}",
            "});"
        ]
    },
    "Auth.signIn": {
        "prefix": "Auth.signIn",
        "body": [
            "Auth.signIn(username,password)",
            "\t.then((user) => {",
            "\t\t // Store user for Auth.confirmSignIn if using MFA",
            "\t\t user = user",
            "\t})",
            "\t.catch((error) => {",
            "\t\t console.log(error)",
            "\t})"
        ]
    },
    "Auth.confirmSignIn": {
        "prefix": "Auth.confirmSignIn",
        "body": [
            "// If MFA enabled, keep the user object from Auth.signIn and collect confirmation code",
            "Auth.confirmSignIn(user, code, mfaType)",
            "\t.then((data) => {",
            "\t\t console.log(data)",
            "\t})",
            "\t.catch((error) => {",
            "\t\t console.log(err)",
            "\t})"
        ]
    },
    "Auth.signUp": {
        "prefix": "Auth.signUp",
        "body": [
            "Auth.signUp({",
            "\t 'username': 'username',",
            "\t 'password': 'password',",
            "\t 'attributes': {",
            "\t\t 'email': 'email@domain.com',",
            "\t\t 'phone_number': '+15551234567'",
            "\t\t // Other custom attributes...",
            "\t },",
            "\t validationData: [], // optional",
            "\t})",
            "\t.then((data) => {",
            "\t\t console.log(data)",
            "\t})",
            "\t.catch((err) => {",
            "\t\t console.log(err)",
            "\t})"
        ]
    },
    "Auth.confirmSignUp": {
        "prefix": "Auth.confirmSignUp",
        "body": [
            "Auth.confirmSignUp(username, code, {",
            "\t// Optional. Force user confirmation irrespective of existing alias. By default set to True.",
            "\tforceAliasCreation: true", 
            "});",
            "\t.then((data) => {",
            "\t\t console.log(data)",
            "\t})",
            "\t.catch((err) => {",
            "\t\t console.log(err)",
            "\t})"
        ]
    },
    "Auth.signOut": {
        "prefix": "Auth.signOut",
        "body": [
            "Auth.signOut()",
            "\t.then((data) => {",
            "\t\t console.log(data)",
            "\t})",
            "\t.catch((err) => {",
            "\t\t console.log(err)",
            "\t})"
        ]
    },
    "Auth Change Password": {
        "prefix": "Auth.currentAuthenticatedUser",
        "body": [
            "Auth.currentAuthenticatedUser()",
            "\t.then(user => {",
            "\t\treturn Auth.changePassword(user, 'oldPassword', 'newPassword');",
            "})",
            "\t.then((data) => {",
            "\t\t console.log(data)",
            "\t})",
            "\t.catch((err) => {",
            "\t\t console.log(err)",
            "\t})"
        ]
    },
    "Auth Forgot Password": {
        "prefix": "Auth.forgotPassword",
        "body": [
            "Auth.forgotPassword(username)",
            "\t.then(user => {",
            "\t\treturn Auth.changePassword(user, 'oldPassword', 'newPassword');",
            "})",
            "\t.then((data) => {",
            "\t\t console.log(data)",
            "\t})",
            "\t.catch((err) => {",
            "\t\t console.log(err)",
            "\t})"
        ]
    },
    "Auth Forgot Password Submit": {
        "prefix": "Auth.forgotPasswordSubmit",
        "body": [
            "Auth.forgotPasswordSubmit(username, code, new_password)",
            "\t.then((data) => {",
            "\t\t console.log(data)",
            "\t})",
            "\t.catch((err) => {",
            "\t\t console.log(err)",
            "\t})"
        ]
    },
    "Auth oauth": {
        "prefix": "oauth",
        "body": [
            "oauth = {",
            "\t// Domain name",
            "\tdomain : 'your-domain-prefix.auth.us-east-1.amazoncognito.com',",
            "\t// Authorized scopes",
            "\tscope: ['phone', 'email', 'profile', 'openid','aws.cognito.signin.user.admin'],",
            "\t// Callback URL",
            "\tredirectSignIn : 'http://www.example.com/signin',",
            "\t// Sign out URL",
            "\tredirectSignOut : 'http://www.example.com/signout',",
            "\t// 'code' for Authorization code grant,",
            "\t// 'token' for Implicit grant",
            "\tresponseType: 'code',",
            "\t// optional, for Cognito hosted ui specified options",
            "\toptions: {",
            "\t\t// Indicates if the data collection is enabled to support Cognito advanced security features. By default, this flag is set to true.",
            "\t\tAdvancedSecurityDataCollectionFlag : true",
            "\t}",
            "}"
        ]
    },
    "logInWithReadPermissionsAsync": {
        "prefix": "logInWithReadPermissionsAsync",
        "body": [
            "logInWithReadPermissionsAsync"
        ]
    },
    "handleAuthStateChange": {
        "prefix": "handleAuthStateChange",
        "body": [
            "handleAuthStateChange"
        ]
    },
    "userPoolWebClientId": {
        "prefix": "userPoolWebClientId",
        "body": [
            "userPoolWebClientId"
        ]
    },
    "OAuthSignIn": {
        "prefix": "OAuthSignIn",
        "body": [
            "OAuthSignIn"
        ]
    },
    "Auth.verifyTotpToken": {
        "prefix": "Auth.verifyTotpToken",
        "body": [
            "Auth.verifyTotpToken(user, challengeAnswer).then(() => {\n",
                "\t// don't forget to set TOTP as the preferred MFA method",
                "\tAuth.setPreferredMFA(user, 'TOTP');",
                "\t// ...",
            "}).catch( e => {",
                "\t// Token is not verified",
            "});"
        ]
    },
    "setPreferredMFA": {
        "prefix": "setPreferredMFA",
        "body": [
            "setPreferredMFA"
        ]
    },
    "publicChallengeParameters": {
        "prefix": "publicChallengeParameters",
        "body": [
            "publicChallengeParameters"
        ]
    },
    "privateChallengeParameters": {
        "prefix": "privateChallengeParameters",
        "body": [
            "privateChallengeParameters"
        ]
    },
    "challengeMetadata": {
        "prefix": "challengeMetadata",
        "body": [
            "challengeMetadata"
        ]
    },
    "challengeName": {
        "prefix": "challengeName",
        "body": [
            "challengeName"
        ]
    },
    "failAuthentication": {
        "prefix": "failAuthentication",
        "body": [
            "failAuthentication"
        ]
    },
    "issueTokens": {
        "prefix": "issueTokens",
        "body": [
            "issueTokens"
        ]
    },
    "length": {
        "prefix": "length",
        "body": [
            "length"
        ]
    },
    "challengeResult": {
        "prefix": "challengeResult",
        "body": [
            "challengeResult"
        ]
    },
    "challengeAnswer": {
        "prefix": "challengeAnswer",
        "body": [
            "challengeAnswer"
        ]
    },
    "answerCorrect": {
        "prefix": "answerCorrect",
        "body": [
            "answerCorrect"
        ]
    },
    "authScreenLabels": {
        "prefix": "authScreenLabels",
        "body": [
            "authScreenLabels = {",
                "\ten: {",
                    "\t\t'Sign Up': 'Create new account',",
                    "\t\t'Sign Up Account': 'Create a new account'",
                "\t}",
            "};\n",
            "I18n.setLanguage('en');",
            "I18n.putVocabularies(authScreenLabels);"
        ]
    }
}